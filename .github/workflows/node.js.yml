# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  unit-tests:

    
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run test:unit


      
  build:


    runs-on: ubuntu-latest
    
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - name: upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: dist
  
  cypress-run:


    runs-on: ubuntu-22.04
    

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js for Cypress
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install serve globally
        run: npm install -g serve
      - name : build
        run: npm run build
      - name: start server
        run: |
          HOST=0.0.0.0 PORT=8080 npm run preview &  # Run in background
          sleep 5 
      - name: cypress run
        uses: cypress-io/github-action@v6
        with:
          wait-on: 'http://localhost:8080'
          wait-on-timeout: 120
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}  
        run : |
            aws sts get-caller-identity  # Verify AWS credentials are working


      - name: Confgiure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
         curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.25.3/bin/linux/amd64/kubectl
         chmod +x ./kubectl
         sudo mv ./kubectl /usr/local/bin/kubectl

      - name: EKS kubeconfig
        run : |
         aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/devop-frontend-deployment
      
      - name: Deployment vertifcation
        run: |
          kubectl get pods -n default

      

         

