# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

    
jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npx vitest run


  build:

    name: Build

    runs-on: ubuntu-latest
    
    needs: unit-tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }} 

    - name: Login to amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/vue-frontend:latest
  

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Delete Existing Resources
        run: |
              aws eks update-kubeconfig --name devops-eks --region ${{ secrets.AWS_REGION }}
              kubectl delete deployment  vue-frontend service vue-frontend  horizontalpodautoscaler vue-frontend-hpa ingress vue-frontend-ingress --ignore-not-found=true
              sleep 60
        env:
          TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}
          TF_VAR_ecr_repo_name: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/vue-frontend:latest

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -target=kubernetes_deployment.vue_frontend -target=kubernetes_service.vue_frontend -target=kubernetes_horizontal_pod_autoscaler_v2.vue_frontend -target=kubernetes_ingress_v1.vue_frontend        
        env:
          TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}
          TF_VAR_ecr_repo_name: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/vue-frontend:latest




      

         

